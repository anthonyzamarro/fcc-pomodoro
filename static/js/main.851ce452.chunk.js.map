{"version":3,"sources":["audio/alarm.mp3","components/timer.js","Pomodoro.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Timer","timeTitle","this","props","sessionMounted","seconds","timerSeconds","minutes","timerMinutes","react_default","a","createElement","className","id","Component","Pomodoro","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSessionLengthDecrement","state","startStop","setState","timeMinutes","sessionLength","handleSessionLengthIncrement","handleBreakLengthDecrement","breakLength","handleBreakLengthIncrement","handleStartStop","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","prevState","startStopTimer","clearInterval","timeIntervalId","stop","handleReset","objectSpread","initialState","promise","pause","currentTime","playAudio","play","setTimeout","initialSessionMinutes","initialBreakMinutes","timeSeconds","subOne","setInterval","bind","assertThisInitialized","document","querySelector","onClick","timer","startTime","src","alarm","Boolean","window","location","hostname","match","ReactDOM","render","src_Pomodoro","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.851ce452.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.9391f1fe.mp3\";","import React, { Component } from \"react\";\n\nclass Timer extends Component {\n  render() {\n    let timeTitle = this.props.sessionMounted === true \n        ? 'Session' : \n        'Break';\n    // let seconds =\n    let seconds = this.props.timerSeconds;\n    if (seconds < 10) {\n      seconds = '0' + seconds;\n    } else if (seconds === 60) {\n      seconds = '00';\n    }\n    //   this.props.timerSeconds === 60 || this.props.timerSeconds === 0\n    //     ? \"00\"\n    //     : this.props.timerSeconds;\n    let minutes = this.props.timerMinutes;\n        if (minutes < 10) {\n          minutes = '0' + minutes;\n        }\n    return (\n      <div className=\"timer\">\n        <h3 id=\"timer-label\">{timeTitle}</h3>\n        <div id=\"time-left\">{minutes}:{seconds}</div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Timer from \"./components/timer.js\";\nimport alarm from \"./audio/alarm.mp3\";\n\nclass Pomodoro extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      startStop: false,\n      sessionMounted: true,\n      timeMinutes: 25,\n      timeSeconds: 60,\n      subOne: 0\n    };\n    this.startStopTimer = this.startStopTimer.bind(this);\n  }\n  componentDidMount() {\n    //set initialState so we can reset if needed\n    this.initialState = this.state;\n    this.promise = document.querySelector(\"#beep\"); \n  }\n  handleSessionLengthDecrement = () => {\n    if (this.state.startStop === false) {\n      if (this.state.sessionMounted) {\n        this.setState({\n          timeMinutes: this.state.timeMinutes - 1\n        });\n      }\n      this.setState({\n        sessionLength: this.state.sessionLength - 1\n      });\n      if (this.state.sessionLength <= 1) this.setState({ sessionLength: 1 });\n      if (this.state.timeMinutes <= 1) this.setState({ timeMinutes: 1 });\n    }\n  };\n  handleSessionLengthIncrement = () => {\n    if (this.state.startStop === false) {\n      if (this.state.sessionMounted) {\n        this.setState({\n          timeMinutes: this.state.timeMinutes + 1\n        });\n      }\n      this.setState({\n        sessionLength: this.state.sessionLength + 1\n      });\n      if (this.state.sessionLength >= 60) this.setState({ sessionLength: 60 });\n    }\n  };\n  handleBreakLengthDecrement = () => {\n    if (this.state.startStop === false) {\n      this.setState({\n        breakLength: this.state.breakLength - 1\n      });\n      if (this.state.breakLength <= 1) this.setState({ breakLength: 1 });\n    }\n  };\n  handleBreakLengthIncrement = () => {\n    if (this.state.startStop === false) {\n      this.setState({\n        breakLength: this.state.breakLength + 1\n      });\n      if (this.state.breakLength >= 60) this.setState({ breakLength: 60 });\n    }\n  };\n  // use async/await to update state immediately\n  handleStartStop = async () => {\n    await this.setState(prevState => ({\n      startStop: !prevState.startStop\n    }));\n    // start session\n    if (this.state.startStop) {\n      this.startStopTimer();\n    } else {\n    // pause session\n      clearInterval(this.timeIntervalId);\n    }\n  };\n  handleReset = () => {\n    clearInterval(this.timeIntervalId);\n    this.setState({ ...this.initialState });\n    this.promise.pause();\n    this.promise.currentTime = 0;\n  };\n  playAudio = () => {\n    this.promise.play();\n    // flip timer state\n    this.setState(prevState => ({\n      sessionMounted: !prevState.sessionMounted,\n    }));\n    //use setTimeout to only play audio for 2 seconds\n    setTimeout(() => {\n      this.promise.pause();\n      // reset respective timers to state user set\n      const initialSessionMinutes = this.state.sessionLength;\n      const initialBreakMinutes = this.state.breakLength;\n      if (this.state.sessionMounted) {\n        this.setState({\n          timeMinutes: initialSessionMinutes,\n          timeSeconds: 60,\n          subOne: 0\n        });\n        this.startStopTimer();\n      } else {\n        this.setState({\n          timeMinutes: initialBreakMinutes,\n          timeSeconds: 60,\n          subOne: 0\n        });\n        this.startStopTimer();\n      }\n      this.promise.currentTime = 0;\n    }, 2000);\n  };\n  startStopTimer = () => {\n    this.timeIntervalId = setInterval(() => {\n      if (this.state.subOne <= 0) {\n        this.setState({\n          timeMinutes: this.state.timeMinutes - 1,\n          subOne: 1\n        })\n      }\n      this.setState({\n        timeSeconds: this.state.timeSeconds - 1\n      });\n      // seconds === 0, but minutes !== 0, subtract 1 from minutes and reset seconds\n      if (this.state.timeSeconds === 0 && this.state.timeMinutes !== 0) {\n        this.setState({\n          timeMinutes: this.state.timeMinutes - 1,\n          timeSeconds: 60\n        });\n      }\n      //both minutes and seconds === 0, then clear\n      if (this.state.timeSeconds === 0 && this.state.timeMinutes === 0) {\n        clearInterval(this.timeIntervalId);\n        this.playAudio();\n      }\n    }, 1000);\n  };\n  render() {\n    return (\n      <div className=\"pomodoro\">\n        <div className=\"b-di\">\n          <div id=\"break-decrement\" onClick={this.handleBreakLengthDecrement}>\n            Break Decrement\n          </div>\n          <div id=\"break-increment\" onClick={this.handleBreakLengthIncrement}>\n            Break Increment\n          </div>\n          <h3 id=\"break-label\">Break Length</h3>\n          <div id=\"break-length\">{this.state.breakLength}</div>\n        </div>\n        <div className=\"s-di\">\n          <div\n            id=\"session-decrement\"\n            onClick={this.handleSessionLengthDecrement}\n          >\n            Session Decrement\n          </div>\n          <div\n            id=\"session-increment\"\n            onClick={this.handleSessionLengthIncrement}\n          >\n            Session Increment\n          </div>\n          <h3 id=\"session-label\">Session Length</h3>\n          <div id=\"session-length\">{this.state.sessionLength}</div>\n        </div>\n        <Timer\n          startTime={this.startStopTimer}\n          timerMinutes={this.state.timeMinutes}\n          timerSeconds={this.state.timeSeconds}\n          sessionMounted={this.state.sessionMounted}\n        />\n        <div\n          id=\"start_stop\"\n          className=\"start-stop\"\n          onClick={this.handleStartStop}\n        >\n        Start/Pause\n        </div>\n        <div id=\"reset\" className=\"reset\" onClick={this.handleReset}>\n          Reset\n        </div>\n        <audio src={alarm} id=\"beep\" />\n      </div>\n    );\n  }\n}\nexport default Pomodoro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pomodoro from './Pomodoro';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pomodoro />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}